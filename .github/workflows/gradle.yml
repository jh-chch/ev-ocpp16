# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle & docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Set YML
      run: |
        mkdir -p src/main/resources
        echo "${{ secrets.APPLICATION_SECRET_YML }}" | base64 --decode > src/main/resources/application-secret.yml
        find src

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
  
    - name: Build with Gradle Wrapper
      run: |
        chmod +x ./gradlew
        ./gradlew clean build -x test

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #   with:
    #     gradle-version: '8.9'
    #
    # - name: Build with Gradle 8.9
    #   run: gradle build

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Docker build & push to Docker Registry
      run: |
        # 이미지 빌드 및 푸시
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest

    - name: Deploy on EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          CURRENT_PROFILE=$(curl -sf http://localhost/profile || echo "")
          if [ -z "$CURRENT_PROFILE" ]; then
            echo "현재 실행 중인 애플리케이션이 없습니다. 초기 실행으로 blue 프로필을 사용합니다."
            CURRENT_PROFILE="green"  # blue를 첫 번째로 실행하기 위해
          else
            echo "현재 서비스 중인 프로필: $CURRENT_PROFILE"
          fi
          
          # 새로 배포할 프로필 결정
          if [ "$CURRENT_PROFILE" = "blue" ]; then
            TARGET_PROFILE=green
            TARGET_PORT=8081
          else
            TARGET_PROFILE=blue
            TARGET_PORT=8080
          fi
          
          echo "애플리케이션 배포 시작: $TARGET_PROFILE $TARGET_PORT"
          
          DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest
          CONTAINER_NAME="${{ secrets.DOCKER_CONTAINER_NAME }}-${TARGET_PROFILE}"
          
          echo "배포 이미지 이름: ${DOCKER_IMAGE}"
          echo "배포 컨테이너 이름: ${CONTAINER_NAME}"

          # 새 이미지 풀 및 컨테이너 실행
          sudo docker pull ${DOCKER_IMAGE}
          sudo docker run -d \
            --name $CONTAINER_NAME \
            -p ${TARGET_PORT}:${TARGET_PORT} \
            -e "PROFILES=${TARGET_PROFILE}" \
            -e "SERVER_PORT=${TARGET_PORT}" \
            ${DOCKER_IMAGE}
          
          # Health check
          echo "새로운 애플리케이션 Health check 시작"
          for i in {1..20}
          do
            sleep 5
            RESPONSE=$(curl -s http://localhost:${TARGET_PORT}/health)
            if [ "$RESPONSE" = "ok" ]; then
              echo "새로운 애플리케이션 배포 성공"
              echo "set \$service_url ${TARGET_PROFILE};" | sudo docker exec -i nginxserver tee /etc/nginx/conf.d/service-env.inc
              sleep 2
              echo "nginx 설정 reload"
              sudo docker exec nginxserver nginx -s reload
              sleep 2
              echo "이전 버전 컨테이너 제거: ${{ secrets.DOCKER_CONTAINER_NAME }}-$CURRENT_PROFILE"
              sudo docker stop "${{ secrets.DOCKER_CONTAINER_NAME }}-$CURRENT_PROFILE" || true
              sudo docker rm "${{ secrets.DOCKER_CONTAINER_NAME }}-$CURRENT_PROFILE" || true
              
              break
            fi
            if [ $i -eq 20 ]; then
              echo "새로운 애플리케이션 배포 실패"
              exit 1
            fi
          done
          
          echo "<none> 태그 이미지 정리"
          sudo docker images | grep "<none>" | awk '{print $3}' | xargs -r sudo docker rmi
  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
